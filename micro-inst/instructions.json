{"instructions": {"MOV R R": ["R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV R (R)+": ["R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV R -(R)": ["R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV R X(R)": ["R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV R @R": ["R.out, ALU.=r, ALU.out, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, R(dst).in", "END"], "MOV -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "R(src).out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in", "END"], "MOV @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in", "MAR.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "MOV @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in", "TMP1.out, ALU.=r, ALU.out, MDR.in, WR", "END"], "ADD R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADD R (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADD R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADD -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADD -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADD @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADD @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADC R (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADC R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADC -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c, ALU.out, R(src).in", "END"], "ADC -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r+l+c", "ALU.out, R(dst).in", "END"], "ADC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "ADC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r+l+c", "ALU.out, MDR.in, WR", "END"], "SUB R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB R (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUB @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUB @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC R (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r-l-c", "ALU.out, R(dst).in", "END"], "SUBC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "SUBC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r-l-c", "ALU.out, MDR.in, WR", "END"], "AND R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l, ALU.out, R(src).in", "END"], "AND R (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l, ALU.out, R(src).in", "END"], "AND R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l, ALU.out, R(src).in", "END"], "AND -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l, ALU.out, R(src).in", "END"], "AND -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r&l", "ALU.out, R(dst).in", "END"], "AND @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "AND @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r&l", "ALU.out, MDR.in, WR", "END"], "OR R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l, ALU.out, R(src).in", "END"], "OR R (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l, ALU.out, R(src).in", "END"], "OR R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l, ALU.out, R(src).in", "END"], "OR -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l, ALU.out, R(src).in", "END"], "OR -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r|l", "ALU.out, R(dst).in", "END"], "OR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "OR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r|l", "ALU.out, MDR.in, WR", "END"], "XNOR R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in", "END"], "XNOR R (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in", "END"], "XNOR R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in", "END"], "XNOR -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in", "END"], "XNOR -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R(src).out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.r(XNOR)l", "ALU.out, R(dst).in", "END"], "XNOR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "XNOR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.r(XNOR)l", "ALU.out, MDR.in, WR", "END"], "CMP R R": ["R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP R (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP R -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP R X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP R @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP R @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ (R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ -(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ @R": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ @(R)+": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ @-(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP (R)+ @X(R)": ["R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) R": ["R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) (R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.r+1, ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) @R": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) @(R)+": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) @-(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP -(R) @X(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R(src).out, ALU.=r, ALU.out, TMP0.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @R @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ (R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ -(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ @-(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @(R)+ @X(R)": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) (R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) -(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) @R": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) @(R)+": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @-(R) @X(R)": ["R.out, ALU.r-1, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) (R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) -(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1", "ALU.out, R.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "R(dst).out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) @R": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) @(R)+": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) @-(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "CMP @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP1.in", "PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, MDR.in", "TMP1.out, ALU.=r, ALU.out, TMP0.in", "MDR.out, ALU.=r, ALU.out, TMP1.in", "TMP1.out, ALU.c=0, ALU.r-l-c", "END"], "INC @X(R) R": ["R.out, ALU.r+1", "ALU.out, R(dst).in", "END"], "INC @X(R) (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.r+1", "ALU.out, R(dst).in", "END"], "INC @X(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r+1", "ALU.out, R(dst).in", "END"], "INC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1", "ALU.out, MDR.in, WR", "END"], "INC @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1", "ALU.out, MDR.in, WR", "END"], "INC @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1", "ALU.out, MDR.in, WR", "END"], "INC @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1", "ALU.out, MDR.in, WR", "END"], "INC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1", "ALU.out, MDR.in, WR", "END"], "DEC @X(R) R": ["R.out, ALU.r-1", "ALU.out, R(dst).in", "END"], "DEC @X(R) (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.r-1", "ALU.out, R(dst).in", "END"], "DEC @X(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.r-1", "ALU.out, R(dst).in", "END"], "DEC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r-1", "ALU.out, MDR.in, WR", "END"], "DEC @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r-1", "ALU.out, MDR.in, WR", "END"], "DEC @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r-1", "ALU.out, MDR.in, WR", "END"], "DEC @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r-1", "ALU.out, MDR.in, WR", "END"], "DEC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r-1", "ALU.out, MDR.in, WR", "END"], "CLR @X(R) R": ["ALU.zero, R(dst).in", "END"], "CLR @X(R) (R)+": ["ALU.zero, R(dst).in", "END"], "CLR @X(R) -(R)": ["ALU.zero, R(dst).in", "END"], "CLR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in", "ALU.zero, MDR.in, WR", "END"], "CLR @X(R) @R": ["R(dst).out, ALU.=r, ALU.out, MAR.in", "ALU.zero, MDR.in, WR", "END"], "CLR @X(R) @(R)+": ["R(dst).out, ALU.=r, MAR.in", "ALU.zero, MDR.in, WR", "R.out, ALU.r+1", "ALU.out, R.in", "ALU.zero, MDR.in, WR", "END"], "CLR @X(R) @-(R)": ["R(dst).out, ALU.r-1, ALU.out, TMP0.in, MAR.in", "TMP0.out, ALU.=r, ALU.out, R.in", "ALU.zero, MDR.in, WR", "END"], "CLR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in", "ALU.zero, MDR.in, WR", "END"], "INV @X(R) R": ["R.out, ALU.~r", "ALU.out, R(dst).in", "END"], "INV @X(R) (R)+": ["R.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.r+1, ALU.out, R.in", "TMP0.out, ALU.~r", "ALU.out, R(dst).in", "END"], "INV @X(R) -(R)": ["R.out, ALU.r-1", "ALU.out, R.in", "R.out, ALU.~r", "ALU.out, R(dst).in", "END"], "INV @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.~r", "ALU.out, MDR.in, WR", "END"], "INV @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.~r", "ALU.out, MDR.in, WR", "END"], "INV @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.~r", "ALU.out, MDR.in, WR", "END"], "INV @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.~r", "ALU.out, MDR.in, WR", "END"], "INV @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out,  ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, TMP0.in", "TMP0.out, ALU.~r", "ALU.out, MDR.in, WR", "END"], "LSR @X(R) R": ["R.out, ALU.=r, ALU.c=0, ALU.rrc", "ALU.out, R.in", "END"], "LSR @X(R) (R)+": ["R.out, ALU.=r, ALU.c=0, ALU.rrc", "ALU.out, R.in", "END"], "LSR @X(R) -(R)": ["R.out, ALU.r-1", "ALU.c=0, ALU.rrc, ALU.out, R.in", "END"], "LSR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rrc, ALU.out, MDR.in, WR", "END"], "LSR @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rrc, ALU.out, MDR.in, WR", "END"], "LSR @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.c=0, ALU.rrc, ALU.out, MDR.in, WR", "END"], "LSR @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rrc, ALU.out, MDR.in, WR", "END"], "LSR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rrc, ALU.out, MDR.in, WR", "END"], "ROR @X(R) R": ["R.out, ALU.=r, ALU.ror", "ALU.out, R.in", "END"], "ROR @X(R) (R)+": ["R.out, ALU.=r, ALU.ror", "ALU.out, R.in", "END"], "ROR @X(R) -(R)": ["R.out, ALU.r-1", "ALU.ror, ALU.out, R.in", "END"], "ROR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.ror, ALU.out, MDR.in, WR", "END"], "ROR @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.ror, ALU.out, MDR.in, WR", "END"], "ROR @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.ror, ALU.out, MDR.in, WR", "END"], "ROR @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.ror, ALU.out, MDR.in, WR", "END"], "ROR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.ror, ALU.out, MDR.in, WR", "END"], "RRC @X(R) R": ["R.out, ALU.=r, ALU.rrc", "ALU.out, R.in", "END"], "RRC @X(R) (R)+": ["R.out, ALU.=r, ALU.rrc", "ALU.out, R.in", "END"], "RRC @X(R) -(R)": ["R.out, ALU.r-1", "ALU.rrc, ALU.out, R.in", "END"], "RRC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rrc, ALU.out, MDR.in, WR", "END"], "RRC @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rrc, ALU.out, MDR.in, WR", "END"], "RRC @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.rrc, ALU.out, MDR.in, WR", "END"], "RRC @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rrc, ALU.out, MDR.in, WR", "END"], "RRC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rrc, ALU.out, MDR.in, WR", "END"], "ASR @X(R) R": ["R.out, ALU.=r, ALU.asr", "ALU.out, R.in", "END"], "ASR @X(R) (R)+": ["R.out, ALU.=r, ALU.asr", "ALU.out, R.in", "END"], "ASR @X(R) -(R)": ["R.out, ALU.r-1", "ALU.asr, ALU.out, R.in", "END"], "ASR @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.asr, ALU.out, MDR.in, WR", "END"], "ASR @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.asr, ALU.out, MDR.in, WR", "END"], "ASR @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.asr, ALU.out, MDR.in, WR", "END"], "ASR @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.asr, ALU.out, MDR.in, WR", "END"], "ASR @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.asr, ALU.out, MDR.in, WR", "END"], "LSL @X(R) R": ["R.out, ALU.=r, ALU.c=0, ALU.rlc", "ALU.out, R.in", "END"], "LSL @X(R) (R)+": ["R.out, ALU.=r, ALU.c=0, ALU.rlc", "ALU.out, R.in", "END"], "LSL @X(R) -(R)": ["R.out, ALU.r-1", "ALU.c=0, ALU.rlc, ALU.out, R.in", "END"], "LSL @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rlc, ALU.out, MDR.in, WR", "END"], "LSL @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rlc, ALU.out, MDR.in, WR", "END"], "LSL @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.c=0, ALU.rlc, ALU.out, MDR.in, WR", "END"], "LSL @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rlc, ALU.out, MDR.in, WR", "END"], "LSL @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.c=0, ALU.rlc, ALU.out, MDR.in, WR", "END"], "ROL @X(R) R": ["R.out, ALU.=r, ALU.rol", "ALU.out, R.in", "END"], "ROL @X(R) (R)+": ["R.out, ALU.=r, ALU.rol", "ALU.out, R.in", "END"], "ROL @X(R) -(R)": ["R.out, ALU.r-1", "ALU.rol, ALU.out, R.in", "END"], "ROL @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rol, ALU.out, MDR.in, WR", "END"], "ROL @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rol, ALU.out, MDR.in, WR", "END"], "ROL @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.rol, ALU.out, MDR.in, WR", "END"], "ROL @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rol, ALU.out, MDR.in, WR", "END"], "ROL @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rol, ALU.out, MDR.in, WR", "END"], "RLC @X(R) R": ["R.out, ALU.=r, ALU.rlc", "ALU.out, R.in", "END"], "RLC @X(R) (R)+": ["R.out, ALU.=r, ALU.rlc", "ALU.out, R.in", "END"], "RLC @X(R) -(R)": ["R.out, ALU.r-1", "ALU.rlc, ALU.out, R.in", "END"], "RLC @X(R) X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rlc, ALU.out, MDR.in, WR", "END"], "RLC @X(R) @R": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rlc, ALU.out, MDR.in, WR", "END"], "RLC @X(R) @(R)+": ["R.out, ALU.=r, ALU.out, MAR.in, RD", "MAR.out, ALU.r+1, ALU.out, R.in", "MDR.out, ALU.=r", "ALU.rlc, ALU.out, MDR.in, WR", "END"], "RLC @X(R) @-(R)": ["R.out, ALU.r-1, ALU.out, TMP0.in", "TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rlc, ALU.out, MDR.in, WR", "END"], "RLC @X(R) @X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r", "ALU.rlc, ALU.out, MDR.in, WR", "END"], "BR": ["IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BEQ": ["IF NOT (Z=1) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BNE": ["IF NOT (Z=0) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BLO": ["IF NOT (C=0) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BLS": ["IF NOT (C=0 or Z=1) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BHI": ["IF NOT (C=1) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "BHS": ["IF NOT (C=1 or Z=1) THEN END, ", "IR.addr.out, ALU.=r, ALU.out, TMP0.in", "PC.out, ALU.c=0, ALU.r+l+c", "ALU.out, PC.in", "END"], "HLT": ["HLT"], "NOP": ["END"], "JSR X(R)": ["PC.out, ALU.=r, ALU.out, MAR.in, RD", "PC.out, ALU.r+1", "ALU.out, PC.in", "MDR.out, ALU.=r, ALU.out, TMP0.in", "R.out, ALU.c=0, ALU.r+l+c, ALU.out, TMP0.in", "R6.out, ALU.r-1", "ALU.out, R6.in, MAR.in", "PC.out, ALU.=r, ALU.out, MDR.in, WR", "TMP0.out, ALU.=r, ALU.out, PC.in", "END"], "RTS": ["R6.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, PC.in", "R6.out, ALU.r+1", "ALU.out, R6.in, MAR.in", "END"], "INT": ["R6.out, ALU.r-1", "ALU.out, R6.in, MAR.in", "FLAGS.out, ALU.=r, ALU.out, MDR.in", "R6.out, ALU.=r, ALU.out, MAR.in, RD", "R6.out, ALU.r-1", "ALU.out, R6.in, MAR.in", "PC.out, ALU.=r, ALU.out, MDR.in", "R6.out, ALU.=r, ALU.out, MAR.in, RD", "PC.in, HARDWARE_ADDRESS.out.l", "END"], "IRET": ["R6.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, PC.in", "R6.out, ALU.r+1", "ALU.out, R6.in, MAR.in", "R6.out, ALU.=r, ALU.out, MAR.in, RD", "MDR.out, ALU.=r, ALU.out, FLAGS.in", "R6.out, ALU.r+1", "ALU.out, R6.in, MAR.in", "END"]}, "signals": ["ALU.=r", "ALU.asr", "ALU.c=0", "ALU.out", "ALU.r&l", "ALU.r(XNOR)l", "ALU.r+1", "ALU.r+l+c", "ALU.r-1", "ALU.r-l-c", "ALU.rlc", "ALU.rol", "ALU.ror", "ALU.rrc", "ALU.r|l", "ALU.zero", "ALU.~r", "FLAGS.in", "FLAGS.out", "HARDWARE_ADDRESS.out.l", "IR.addr.out", "MAR.in", "MAR.out", "MDR.in", "MDR.out", "PC.in", "PC.out", "R(dst).in", "R(dst).out", "R(src).in", "R(src).out", "RD", "TMP0.in", "TMP0.out", "TMP1.in", "TMP1.out", "WR"]}
