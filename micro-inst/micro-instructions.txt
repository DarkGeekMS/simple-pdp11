------------------------------------------
PDP11-Simplified 2-Bus Micro-instructions
------------------------------------------

Notes:
    - Right bus is shortened as `r`, left is `l`.
    - FLAGS register is connected (out) to `r` and (in) to `l`.
    - ALU has output tri-state to buffer its output.
    - ALU functions:
        -- pass input from `r`:       ALU.=r
        -- enable output:             ALU.out
        -- out zero:                  ALU.zero
        -- add:                       ALU.r+l
        -- sub:                       ALU.r-l
        -- increment:                 ALU.r+1
        -- decrement:                 ALU.r-1
        -- add with carry:            ALU.r+l+c
        -- sub with carry:            ALU.r-l-c
        -- and:                       ALU.r&l
        -- or:                        ALU.r|l
        -- xnor:                      ALU.r(XNOR)l
        -- not r:                     ALU.~r
        -- arithmetic shift right:    ALU.asr           (ALU[15]   & ALU[15:1])
        -- logical shift right:       ALU.lsr           (0         & ALU[15:1])
        -- logical shift left:        ALU.lsl           (ALU[14:0] & 0)
        -- rotate right:              ALU.ror           (ALU[0]    & ALU[15:1])
        -- rotate left:               ALU.rol           (ALU[14:0] & ALU[15])
        -- rotate right with carry:   ALU.rrc           (carry     & ALU[15:1])
        -- rotate left with carry:    ALU.rlc           (ALU[14:0] & carry)
    - Instruction fetch micro-instructions are performed one time before each instruction, 
        they are omitted for clearity.

---------------
Fetch micro-instructions
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, IR.in


---------------
MOV R R
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
MOV R (R)+
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
MOV R -(R)
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
MOV R X(R)
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 6
MEM access = 2

---------------
MOV R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 7
MEM access = 2

---------------
MOV R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 2

---------------
MOV R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 2

---------------
MOV R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
MOV (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 1

---------------
MOV (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 1

---------------
MOV (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 1

---------------
MOV (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 2

---------------
MOV (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 2

---------------
MOV (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 2

---------------
MOV (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 2

---------------
MOV (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
MOV -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 8
MEM access = 1

---------------
MOV -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 8
MEM access = 1

---------------
MOV -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

CPU cicles = 8
MEM access = 1

---------------
MOV -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 2

---------------
MOV -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 2

---------------
MOV -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 2

---------------
MOV -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 2

---------------
MOV -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
MOV X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 12
MEM access = 3

---------------
MOV X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 12
MEM access = 3

---------------
MOV X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 12
MEM access = 3

---------------
MOV X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
MOV X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
MOV X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
MOV X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
MOV X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 6

---------------
MOV @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 2

---------------
MOV @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 2

---------------
MOV @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 8
MEM access = 2

---------------
MOV @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
MOV @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
MOV @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
MOV @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
MOV @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
MOV @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
MOV @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
MOV @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
MOV @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
MOV @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
MOV @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 9
MEM access = 2

---------------
MOV @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
MOV @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
MOV @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
MOV @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
MOV @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
MOV @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 13
MEM access = 4

---------------
MOV @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 13
MEM access = 4

---------------
MOV @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in
END

CPU cicles = 13
MEM access = 4

---------------
MOV @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
MOV @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
MOV @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in
MAR.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
MOV @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
MOV @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in
TMP1.out, ALU.=r, ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 7

---------------
ADD R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l, ALU.out, R(src).in
END

CPU cicles = 7
MEM access = 1

---------------
ADD R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
ADD R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
ADD R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADD R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ADD R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
ADD R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
ADD R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
ADD (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
ADD (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
ADD (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
ADD (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
ADD (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
ADD (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADD (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADD (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
ADD -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
ADD -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l, ALU.out, R(src).in
END

CPU cicles = 11
MEM access = 1

---------------
ADD -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
ADD -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
ADD -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADD -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADD -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
ADD X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 3

---------------
ADD X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
ADD X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
ADD X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
ADD X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
ADD @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
ADD @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADD @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADD @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
ADD @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 4

---------------
ADD @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADD @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADD @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
ADD @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADD @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADD @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
ADD @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADD @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADD @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADD @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADD @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADD @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADD @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
ADD @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADD @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADD @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADD @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADD @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADD @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
ADD @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 4

---------------
ADD @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
ADD @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
ADD @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
ADD @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADD @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADD @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l
ALU.out, MDR.in, WR
END

CPU cicles = 21
MEM access = 8

---------------
ADC R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c, ALU.out, R(src).in
END

CPU cicles = 7
MEM access = 1

---------------
ADC R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
ADC R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
ADC R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADC R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ADC R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
ADC R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
ADC R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
ADC (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
ADC (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
ADC (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
ADC (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
ADC (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
ADC (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADC (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADC (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
ADC -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
ADC -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c, ALU.out, R(src).in
END

CPU cicles = 11
MEM access = 1

---------------
ADC -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
ADC -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
ADC -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADC -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
ADC -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
ADC X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 3

---------------
ADC X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
ADC X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
ADC X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
ADC X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
ADC @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
ADC @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADC @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADC @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
ADC @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 4

---------------
ADC @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADC @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADC @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
ADC @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADC @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADC @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
ADC @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADC @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADC @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADC @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADC @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
ADC @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
ADC @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
ADC @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
ADC @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ADC @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADC @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
ADC @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADC @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
ADC @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 4

---------------
ADC @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r+l+c
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
ADC @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
ADC @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
ADC @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADC @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
ADC @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r+l+c
ALU.out, MDR.in, WR
END

CPU cicles = 21
MEM access = 8

---------------
SUB R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 8
MEM access = 1

---------------
SUB R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUB R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUB R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
SUB R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
SUB R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
SUB R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
SUB R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
SUB (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUB (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 1

---------------
SUB (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUB (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 4

---------------
SUB (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 3

---------------
SUB (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 3

---------------
SUB (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 3

---------------
SUB (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUB -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUB -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUB -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUB -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUB -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
SUB -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 3

---------------
SUB -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 3

---------------
SUB -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 5

---------------
SUB X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
SUB X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 18
MEM access = 3

---------------
SUB X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
SUB X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 22
MEM access = 6

---------------
SUB X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 5

---------------
SUB X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUB X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUB X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 23
MEM access = 7

---------------
SUB @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
SUB @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 2

---------------
SUB @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
SUB @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 5

---------------
SUB @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
SUB @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUB @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUB @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
SUB @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
SUB @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 2

---------------
SUB @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
SUB @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUB @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUB @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUB @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUB @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUB @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
SUB @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 2

---------------
SUB @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
SUB @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUB @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUB @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUB @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUB @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUB @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
SUB @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 19
MEM access = 4

---------------
SUB @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
SUB @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 23
MEM access = 7

---------------
SUB @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
SUB @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUB @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUB @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
ALU.out, MDR.in, WR
END

CPU cicles = 24
MEM access = 8

---------------
SUBC R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 8
MEM access = 1

---------------
SUBC R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUBC R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUBC R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
SUBC R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
SUBC R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
SUBC R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
SUBC R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
SUBC (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUBC (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 1

---------------
SUBC (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUBC (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 4

---------------
SUBC (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 3

---------------
SUBC (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 3

---------------
SUBC (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 3

---------------
SUBC (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUBC -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
SUBC -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUBC -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
SUBC -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUBC -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
SUBC -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 3

---------------
SUBC -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 3

---------------
SUBC -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 5

---------------
SUBC X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
SUBC X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 18
MEM access = 3

---------------
SUBC X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
SUBC X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 22
MEM access = 6

---------------
SUBC X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 5

---------------
SUBC X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUBC X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUBC X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 23
MEM access = 7

---------------
SUBC @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
SUBC @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 2

---------------
SUBC @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
SUBC @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 18
MEM access = 5

---------------
SUBC @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 4

---------------
SUBC @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUBC @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUBC @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
SUBC @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
SUBC @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 2

---------------
SUBC @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
SUBC @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUBC @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUBC @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUBC @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUBC @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUBC @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
SUBC @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 2

---------------
SUBC @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
SUBC @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 5

---------------
SUBC @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
SUBC @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUBC @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 4

---------------
SUBC @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUBC @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
SUBC @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 19
MEM access = 4

---------------
SUBC @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l-c
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
SUBC @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 23
MEM access = 7

---------------
SUBC @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
SUBC @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUBC @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 6

---------------
SUBC @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l-c
ALU.out, MDR.in, WR
END

CPU cicles = 24
MEM access = 8

---------------
AND R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l, ALU.out, R(src).in
END

CPU cicles = 7
MEM access = 1

---------------
AND R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
AND R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
AND R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
AND R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
AND R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
AND R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
AND R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
AND (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
AND (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
AND (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
AND (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
AND (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
AND (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
AND (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
AND (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
AND -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
AND -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l, ALU.out, R(src).in
END

CPU cicles = 11
MEM access = 1

---------------
AND -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
AND -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
AND -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
AND -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
AND -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
AND X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 3

---------------
AND X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
AND X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
AND X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
AND X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
AND @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
AND @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
AND @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
AND @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
AND @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 4

---------------
AND @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
AND @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
AND @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
AND @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
AND @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
AND @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
AND @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
AND @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
AND @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
AND @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
AND @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
AND @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
AND @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
AND @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
AND @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
AND @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
AND @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
AND @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
AND @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
AND @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 4

---------------
AND @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r^l
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
AND @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
AND @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
AND @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
AND @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
AND @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r^l
ALU.out, MDR.in, WR
END

CPU cicles = 21
MEM access = 8

---------------
OR R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l, ALU.out, R(src).in
END

CPU cicles = 7
MEM access = 1

---------------
OR R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
OR R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
OR R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
OR R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
OR R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
OR R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
OR R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
OR (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
OR (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
OR (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
OR (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
OR (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
OR (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
OR (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
OR (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
OR -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
OR -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l, ALU.out, R(src).in
END

CPU cicles = 11
MEM access = 1

---------------
OR -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
OR -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
OR -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
OR -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
OR -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
OR X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 3

---------------
OR X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
OR X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
OR X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
OR X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
OR @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
OR @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
OR @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
OR @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
OR @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 4

---------------
OR @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
OR @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
OR @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
OR @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
OR @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
OR @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
OR @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
OR @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
OR @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
OR @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
OR @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
OR @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
OR @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
OR @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
OR @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
OR @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
OR @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
OR @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
OR @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
OR @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 4

---------------
OR @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r|l
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
OR @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
OR @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
OR @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
OR @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
OR @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r|l
ALU.out, MDR.in, WR
END

CPU cicles = 21
MEM access = 8

---------------
XNOR R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in
END

CPU cicles = 7
MEM access = 1

---------------
XNOR R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
XNOR R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
XNOR R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
XNOR R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
XNOR R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
XNOR R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
XNOR R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
XNOR (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 1

---------------
XNOR (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
XNOR (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 1

---------------
XNOR (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
XNOR (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
XNOR (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
XNOR (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
XNOR (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in
END

CPU cicles = 9
MEM access = 1

---------------
XNOR -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 1

---------------
XNOR -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l, ALU.out, R(src).in
END

CPU cicles = 11
MEM access = 1

---------------
XNOR -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 4

---------------
XNOR -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
XNOR -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
XNOR -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 3

---------------
XNOR -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
R(src).out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 14
MEM access = 3

---------------
XNOR X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 3

---------------
XNOR X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 3

---------------
XNOR X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 19
MEM access = 6

---------------
XNOR X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
XNOR X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
XNOR @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 10
MEM access = 2

---------------
XNOR @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
XNOR @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
XNOR @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 15
MEM access = 5

---------------
XNOR @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 11
MEM access = 4

---------------
XNOR @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
XNOR @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
XNOR @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
XNOR @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
XNOR @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
XNOR @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
XNOR @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
XNOR @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
XNOR @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
XNOR @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
XNOR @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 11
MEM access = 2

---------------
XNOR @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 12
MEM access = 2

---------------
XNOR @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 13
MEM access = 2

---------------
XNOR @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 5

---------------
XNOR @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
XNOR @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
XNOR @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
XNOR @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
XNOR @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 15
MEM access = 4

---------------
XNOR @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 16
MEM access = 4

---------------
XNOR @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r(XNOR)l
ALU.out, R(dst).in
END

CPU cicles = 17
MEM access = 4

---------------
XNOR @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 20
MEM access = 7

---------------
XNOR @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 16
MEM access = 6

---------------
XNOR @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
XNOR @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 17
MEM access = 6

---------------
XNOR @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

CPU cicles = 21
MEM access = 8

---------------
CMP R R
---------------
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 7
MEM access = 1

---------------
CMP R (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 9
MEM access = 1

---------------
CMP R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 9
MEM access = 1

---------------
CMP R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 13
MEM access = 3

---------------
CMP R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 9
MEM access = 2

---------------
CMP R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 10
MEM access = 2

---------------
CMP R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 10
MEM access = 2

---------------
CMP R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 4

---------------
CMP (R)+ R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 9
MEM access = 1

---------------
CMP (R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 13
MEM access = 1

---------------
CMP (R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 11
MEM access = 1

---------------
CMP (R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 17
MEM access = 3

---------------
CMP (R)+ @R
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 13
MEM access = 2

---------------
CMP (R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 2

---------------
CMP (R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 2

---------------
CMP (R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 9
MEM access = 1

---------------
CMP -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r+1, ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 11
MEM access = 1

---------------
CMP -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 11
MEM access = 1

---------------
CMP -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 11
MEM access = 2

---------------
CMP -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 12
MEM access = 2

---------------
CMP -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 12
MEM access = 2

---------------
CMP -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R(src).out, ALU.=r, ALU.out, TMP0.in
TMP1.out, ALU.r-l
END

CPU cicles = 16
MEM access = 4

---------------
CMP X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 13
MEM access = 3

---------------
CMP X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 17
MEM access = 3

---------------
CMP X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 21
MEM access = 5

---------------
CMP X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 17
MEM access = 4

---------------
CMP X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 22
MEM access = 6

---------------
CMP @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 9
MEM access = 2

---------------
CMP @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 13
MEM access = 2

---------------
CMP @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 11
MEM access = 2

---------------
CMP @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 17
MEM access = 4

---------------
CMP @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 13
MEM access = 3

---------------
CMP @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 3

---------------
CMP @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 3

---------------
CMP @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 5

---------------
CMP @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 10
MEM access = 2

---------------
CMP @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 2

---------------
CMP @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 12
MEM access = 2

---------------
CMP @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 3

---------------
CMP @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 19
MEM access = 5

---------------
CMP @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 10
MEM access = 2

---------------
CMP @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 2

---------------
CMP @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 12
MEM access = 2

---------------
CMP @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 14
MEM access = 3

---------------
CMP @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 15
MEM access = 3

---------------
CMP @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 19
MEM access = 5

---------------
CMP @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 14
MEM access = 4

---------------
CMP @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 4

---------------
CMP @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1
ALU.out, R.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
R(dst).out, ALU.r-l
END

CPU cicles = 16
MEM access = 4

---------------
CMP @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 22
MEM access = 6

---------------
CMP @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 18
MEM access = 5

---------------
CMP @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 19
MEM access = 5

---------------
CMP @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 19
MEM access = 5

---------------
CMP @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP1.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, MDR.in
TMP1.out, ALU.=r, ALU.out, TMP0.in
MDR.out, ALU.=r, ALU.out, TMP1.in
TMP1.out, ALU.r-l
END

CPU cicles = 23
MEM access = 7

---------------
INC R
---------------
R.out, ALU.r+1
ALU.out, R(dst).in
END

CPU cicles = 7
MEM access = 1

---------------
INC (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.r+1
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
INC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r+1
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
INC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
INC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
INC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
INC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
INC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
DEC R
---------------
R.out, ALU.r-1
ALU.out, R(dst).in
END

CPU cicles = 7
MEM access = 1

---------------
DEC (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.r-1
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
DEC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
DEC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r-1
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
DEC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r-1
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
DEC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r-1
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
DEC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r-1
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
DEC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r-1
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
CLR R
---------------
ALU.zero, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
CLR (R)+
---------------
ALU.zero, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
CLR -(R)
---------------
ALU.zero, R(dst).in
END

CPU cicles = 6
MEM access = 1

---------------
CLR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in
ALU.zero, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
CLR @R
---------------
R(dst).out, ALU.=r, ALU.out, MAR.in
ALU.zero, MDR.in, WR
END

CPU cicles = 7
MEM access = 2

---------------
CLR @(R)+
---------------
R(dst).out, ALU.=r, MAR.in
ALU.zero, MDR.in, WR
R.out, ALU.r+1
ALU.out, R.in
ALU.zero, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
CLR @-(R)
---------------
R(dst).out, ALU.r-1, ALU.out, TMP0.in, MAR.in
TMP0.out, ALU.=r, ALU.out, R.in
ALU.zero, MDR.in, WR
END

CPU cicles = 8
MEM access = 2

---------------
CLR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in
ALU.zero, MDR.in, WR
END

CPU cicles = 11
MEM access = 3

---------------
INV R
---------------
R.out, ALU.~r
ALU.out, R(dst).in
END

CPU cicles = 7
MEM access = 1

---------------
INV (R)+
---------------
R.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.r+1, ALU.out, R.in
TMP0.out, ALU.~r
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
INV -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.~r
ALU.out, R(dst).in
END

CPU cicles = 9
MEM access = 1

---------------
INV X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.~r
ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 4

---------------
INV @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.~r
ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
INV @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.~r
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
INV @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.~r
ALU.out, MDR.in, WR
END

CPU cicles = 10
MEM access = 3

---------------
INV @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out,  ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, TMP0.in
TMP0.out, ALU.~r
ALU.out, MDR.in, WR
END

CPU cicles = 14
MEM access = 5

---------------
LSR R
---------------
R.out, ALU.=r, ALU.lsr
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSR (R)+
---------------
R.out, ALU.=r, ALU.lsr
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSR -(R)
---------------
R.out, ALU.r-1
ALU.lsr, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsr, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
LSR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsr, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
LSR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.lsr, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
LSR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.lsr, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
LSR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsr, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
ROR R
---------------
R.out, ALU.=r, ALU.ror
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROR (R)+
---------------
R.out, ALU.=r, ALU.ror
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROR -(R)
---------------
R.out, ALU.r-1
ALU.ror, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.ror, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ROR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.ror, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
ROR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.ror, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ROR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.ror, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ROR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.ror, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
RRC R
---------------
R.out, ALU.=r, ALU.rrc
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RRC (R)+
---------------
R.out, ALU.=r, ALU.rrc
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RRC -(R)
---------------
R.out, ALU.r-1
ALU.rrc, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RRC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rrc, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
RRC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rrc, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
RRC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.rrc, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
RRC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.rrc, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
RRC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rrc, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
ASR R
---------------
R.out, ALU.=r, ALU.asr
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ASR (R)+
---------------
R.out, ALU.=r, ALU.asr
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ASR -(R)
---------------
R.out, ALU.r-1
ALU.asr, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ASR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.asr, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ASR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.asr, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
ASR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.asr, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ASR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.asr, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ASR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.asr, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
LSL R
---------------
R.out, ALU.=r, ALU.lsl
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSL (R)+
---------------
R.out, ALU.=r, ALU.lsl
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSL -(R)
---------------
R.out, ALU.r-1
ALU.lsl, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
LSL X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsl, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
LSL @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsl, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
LSL @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.lsl, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
LSL @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.lsl, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
LSL @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.lsl, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
ROL R
---------------
R.out, ALU.=r, ALU.rol
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROL (R)+
---------------
R.out, ALU.=r, ALU.rol
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROL -(R)
---------------
R.out, ALU.r-1
ALU.rol, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
ROL X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rol, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
ROL @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rol, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
ROL @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.rol, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ROL @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.rol, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
ROL @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rol, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
RLC R
---------------
R.out, ALU.=r, ALU.rlc
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RLC (R)+
---------------
R.out, ALU.=r, ALU.rlc
ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RLC -(R)
---------------
R.out, ALU.r-1
ALU.rlc, ALU.out, R.in
END

CPU cicles = 7
MEM access = 1

---------------
RLC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rlc, ALU.out, MDR.in, WR
END

CPU cicles = 12
MEM access = 4

---------------
RLC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rlc, ALU.out, MDR.in, WR
END

CPU cicles = 8
MEM access = 3

---------------
RLC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, ALU.=r
ALU.rlc, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
RLC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP0.in
TMP0.out, ALU.=r, ALU.out, R.in, MAR.in, RD
MDR.out, ALU.=r
ALU.rlc, ALU.out, MDR.in, WR
END

CPU cicles = 9
MEM access = 3

---------------
RLC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r
ALU.rlc, ALU.out, MDR.in, WR
END

CPU cicles = 13
MEM access = 5

---------------
BR <OFFSET>
---------------
IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 8
MEM access = 1

---------------
BEQ <OFFSET>
---------------
IF NOT (Z=1) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
BNE <OFFSET>
---------------
IF NOT (Z=0) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
BLO <OFFSET>
---------------
IF NOT (C=0) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
BLS <OFFSET>
---------------
IF NOT (C=0 or Z=1) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
BHI <OFFSET>
---------------
IF NOT (C=1) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
BHS <OFFSET>
---------------
IF NOT (C=1 or Z=1) THEN END, IR.addr.out, ALU.=r, ALU.out, TMP0.in
PC.out, ALU.r+l
ALU.out, PC.in
END

CPU cicles = 9
MEM access = 1

---------------
HLT
---------------
HLT

CPU cicles = 5
MEM access = 1

---------------
NOP
---------------
END

CPU cicles = 5
MEM access = 1

---------------
JSR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, TMP0.in
R.out, ALU.r+l, ALU.out, TMP0.in
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
PC.out, ALU.=r, ALU.out, MDR.in, WR
TMP0.out, ALU.=r, ALU.out, PC.in
END

CPU cicles = 14
MEM access = 3

---------------
RTS
---------------
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, PC.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
END

CPU cicles = 9
MEM access = 2

---------------
INT
---------------
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
FLAGS.out, ALU.=r, ALU.out, MDR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
PC.out, ALU.=r, ALU.out, MDR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
PC.in, HARDWARE_ADDRESS.out.l
END

CPU cicles = 14
MEM access = 4

---------------
IRET
---------------
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, PC.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, FLAGS.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
END

CPU cicles = 13
MEM access = 3
--------------------
--------------------
Total CPU cicles = 8794
Total MEM access = 2247

Average MEM access = 3.319
CPI = 12.990
--------------------
--------------------
Total Control Signals (42): {
	ALU.=r
	ALU.asr
	ALU.lsl
	ALU.lsr
	ALU.out
	ALU.r(XNOR)l
	ALU.r+1
	ALU.r+l
	ALU.r+l+c
	ALU.r-1
	ALU.r-l
	ALU.r-l-c
	ALU.r^l
	ALU.rlc
	ALU.rol
	ALU.ror
	ALU.rrc
	ALU.r|l
	ALU.zero
	ALU.~r
	END
	FLAGS.in
	FLAGS.out
	HARDWARE_ADDRESS.out.l
	HLT
	IR.addr.out
	MAR.in
	MAR.out
	MDR.in
	MDR.out
	PC.in
	PC.out
	R(dst).in
	R(dst).out
	R(src).in
	R(src).out
	RD
	TMP0.in
	TMP0.out
	TMP1.in
	TMP1.out
	WR
}
