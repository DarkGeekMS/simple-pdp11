------------------------------------------
PDP11-Simplified 2-Bus Micro-instructions
------------------------------------------

Notes:
    - Right bus is shortened as `r`, left is `l`.
    - Every register can perform the following shift operations in-place:
        --  0 || [dst] 15->1
        --  [dst] 0 || [dst] 15->1
        --  C || [dst] 15->1
        --  [dst] 15 || [dst] 15->1
        --  [dst] 14->0 || 0
        --  [dst] 14->0 || [dst] 15
        --  [dst] 14->0 || C
    - FLAGS register is connected (out) to `r` and (in) to `l`.
    - ALU has output tri-state to buffer its output.
    - ALU functions:
        -- pass input from `r`:  =r
        -- enable output:        out
        -- add:                  r+l
        -- sub:                  r-l
        -- increment:            r+1
        -- decrement:            r-1
        -- add with carry:       r+l+c
        -- sub with carry:       r-l-c
        -- and:                  r&l
        -- or:                   r|l
        -- xnor:                 r(XNOR)l
        -- not r:                ~r
    - Every line in micro-instructions needs one and only one clock cicle.
    - Instruction fetch micro-instructions are performed one time before each instruction, 
        they are omitted for clearity.

---------------
Fetch micro-instructions
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, ALU.=r, ALU.out, IR.in


---------------
MOV R R
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
MOV R (R)+
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
MOV R -(R)
---------------
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
MOV R X(R)
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 2

---------------
MOV R @R
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 2

---------------
MOV R @(R)+
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 2

---------------
MOV R @-(R)
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 2

---------------
MOV R @X(R)
---------------
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 2

---------------
MOV (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, R(dst).in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
MOV -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, ALU.=r, ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
MOV @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
MOV @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
MOV @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADD R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
ADD R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
ADD R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADD R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
ADD R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ADD R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADD R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADD R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
ADD (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADD (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADD (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADD (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
ADD (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADD (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADD (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADD (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
ADD -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADD -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
ADD -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADD -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
ADD -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADD -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
ADD -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
ADD -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
ADD X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
ADD X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADD X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADD X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADD X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADD X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADD @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADD @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADD @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
ADD @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADD @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADD @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADD @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADD @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADC R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
ADC R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
ADC R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADC R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
ADC R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ADC R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADC R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADC R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
ADC (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADC (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADC (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADC (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
ADC (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
ADC (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADC (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADC (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
ADC -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ADC -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
ADC -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
ADC -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
ADC -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
ADC -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
ADC -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
ADC -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
ADC X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
ADC X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADC X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADC X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADC X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADC X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADC @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
ADC @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
ADC @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
ADC @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADC @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r+l+c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
ADC @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
ADC @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
ADC @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r+l+c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUB R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
SUB R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
SUB R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUB R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
SUB R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
SUB R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUB R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUB R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
SUB (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUB (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUB (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUB (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
SUB (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUB (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUB (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUB (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
SUB -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUB -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
SUB -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUB -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
SUB -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUB -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
SUB -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
SUB -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
SUB X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
SUB X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUB X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUB X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUB X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUB X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUB @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUB @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUB @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
SUB @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUB @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUB @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUB @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUB @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUBC R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
SUBC -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUBC X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUBC @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
SUBC @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
SUBC @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l-c
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
SUBC @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
SUBC @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
SUBC @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l-c
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
AND R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
AND R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
AND R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
AND R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
AND R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
AND R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
AND R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
AND R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
AND (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
AND (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
AND (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
AND (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
AND (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
AND (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
AND (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
AND (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
AND -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
AND -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
AND -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
AND -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
AND -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
AND -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
AND -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
AND -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
AND X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
AND X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
AND X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
AND X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
AND X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
AND X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
AND @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
AND @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
AND @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
AND @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
AND @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
AND @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
AND @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
AND @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
AND @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
AND @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
AND @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
AND @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
AND @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
AND @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
AND @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
AND @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
AND @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
AND @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
AND @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
AND @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
AND @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
AND @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
AND @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r^l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
AND @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
AND @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
AND @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
AND @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r^l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
OR R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
OR R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
OR R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
OR R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
OR R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
OR R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
OR R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
OR R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
OR (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
OR (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
OR (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
OR (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
OR (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
OR (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
OR (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
OR (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
OR -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
OR -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
OR -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
OR -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
OR -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
OR -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
OR -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
OR -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
OR X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
OR X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
OR X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
OR X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
OR X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
OR X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
OR @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
OR @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
OR @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
OR @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
OR @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
OR @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
OR @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
OR @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
OR @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
OR @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
OR @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
OR @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
OR @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
OR @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
OR @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
OR @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
OR @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
OR @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
OR @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
OR @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
OR @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
OR @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
OR @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r|l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
OR @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
OR @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
OR @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
OR @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r|l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
XNOR R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l, ALU.out, R(src).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
XNOR -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
XNOR X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
XNOR @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
XNOR @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 4

---------------
XNOR @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r(XNOR)l
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
XNOR @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
XNOR @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 17
Instruction Total MEM access (RD,WR) = 5

---------------
XNOR @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r(XNOR)l
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 21
Instruction Total MEM access (RD,WR) = 6

---------------
CMP R R
---------------
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
CMP R (R)+
---------------
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
CMP R -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
CMP R X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
CMP R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
CMP R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
CMP R @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
CMP R @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 3

---------------
CMP (R)+ R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
CMP (R)+ (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
CMP (R)+ -(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 1

---------------
CMP (R)+ X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP (R)+ @R
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
CMP (R)+ @(R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP (R)+ @-(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP (R)+ @X(R)
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP -(R) R
---------------
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
CMP -(R) (R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
CMP -(R) -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R.in
R(src).out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 1

---------------
CMP -(R) X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
CMP -(R) @R
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP -(R) @(R)+
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
CMP -(R) @-(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 2

---------------
CMP -(R) @X(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
R(src).out, TMP1.in.r
TMP2.out.r, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 3

---------------
CMP X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
CMP X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 20
Instruction Total MEM access (RD,WR) = 5

---------------
CMP X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
CMP X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 20
Instruction Total MEM access (RD,WR) = 5

---------------
CMP @R R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @R (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @R -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @R X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @R @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @R @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @R @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @R @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @(R)+ R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @(R)+ (R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @(R)+ -(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @(R)+ X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @(R)+ @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @(R)+ @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @(R)+ @-(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @(R)+ @X(R)
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @-(R) R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @-(R) (R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @-(R) -(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 2

---------------
CMP @-(R) X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @-(R) @R
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 11
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @-(R) @(R)+
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @-(R) @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @-(R) @X(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @X(R) R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @X(R) (R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, TMP2.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @X(R) -(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1
ALU.out, R.in
R(dst).out, TMP1.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
CMP @X(R) X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 20
Instruction Total MEM access (RD,WR) = 5

---------------
CMP @X(R) @R
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @X(R) @(R)+
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @X(R) @-(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
R.out, ALU.r-1, ALU.out, TMP2.in.l
TMP2.out.l, R.in, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 16
Instruction Total MEM access (RD,WR) = 4

---------------
CMP @X(R) @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP2.in.r
TMP1.out.r, TMP2.out.l, ALU.r-l
END

Instruction Total CPU cicles = 20
Instruction Total MEM access (RD,WR) = 5

---------------
INC R
---------------
R.out, ALU.r+1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
INC (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, ALU.r+1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
INC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r+1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
INC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r+1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
INC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r+1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
INC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r+1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
INC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r+1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
INC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r+1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
DEC R
---------------
R.out, ALU.r-1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
DEC (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, ALU.r-1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
DEC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.r-1
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
DEC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r-1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
DEC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r-1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
DEC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r-1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
DEC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r-1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
DEC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.r-1
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
CLR R
---------------
Zero, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
CLR (R)+
---------------
Zero, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
CLR -(R)
---------------
Zero, R(dst).in
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
CLR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP2.in.r
R.out, TMP2.out.l, ALU.r+l
ALU.out, MAR.in
Zero, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
CLR @R
---------------
R(dst).out, ALU.=r, ALU.out, MAR.in
Zero, MDR.in, WR
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 2

---------------
CLR @(R)+
---------------
R(dst).out, ALU.=r, MAR.in
Zero, MDR.in, WR
R.out, ALU.r+1
ALU.out, R.in
Zero, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
CLR @-(R)
---------------
R(dst).out, ALU.r-1, ALU.out, TMP1.in.l, MAR.in
TMP1.out.l, R.in
Zero, MDR.in, WR
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 2

---------------
CLR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in
Zero, MDR.in, WR
END

Instruction Total CPU cicles = 12
Instruction Total MEM access (RD,WR) = 3

---------------
INV R
---------------
R.out, ALU.~r
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 7
Instruction Total MEM access (RD,WR) = 1

---------------
INV (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.out.r, ALU.~r
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
INV -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.out, ALU.~r
ALU.out, R(dst).in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
INV X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.~r
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
INV @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.~r
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
INV @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.out.r, ALU.~r
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
INV @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.~r
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
INV @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.out.r, ALU.~r
ALU.out, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
LSR R
---------------
R.(0 || [dst] 15->1)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
LSR (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.(0 || [dst] 15->1)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
LSR -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.(0 || [dst] 15->1)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
LSR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
LSR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
LSR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.(0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
LSR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
LSR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ROR R
---------------
R.([dst] 0 || [dst] 15->1)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
ROR (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ROR -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.([dst] 0 || [dst] 15->1)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
ROR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ROR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
ROR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ROR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ROR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 0 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
RRC R
---------------
R.(C || [dst] 15->1)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
RRC (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.(C || [dst] 15->1)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
RRC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.(C || [dst] 15->1)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
RRC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(C || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
RRC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(C || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
RRC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.(C || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
RRC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(C || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
RRC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.(C || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ASR R
---------------
R.([dst] 15 || [dst] 15->1)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
ASR (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ASR -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.([dst] 15 || [dst] 15->1)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
ASR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ASR @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
ASR @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ASR @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ASR @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 15 || [dst] 15->1)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
LSL R
---------------
R.([dst] 14->0 || 0)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
LSL (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.([dst] 14->0 || 0)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
LSL -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.([dst] 14->0 || 0)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
LSL X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || 0)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
LSL @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || 0)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
LSL @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || 0)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
LSL @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || 0)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
LSL @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || 0)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ROL R
---------------
R.([dst] 14->0 || [dst] 15)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
ROL (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
ROL -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.([dst] 14->0 || [dst] 15)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
ROL X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
ROL @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
ROL @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ROL @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
ROL @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || [dst] 15)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
RLC R
---------------
R.([dst] 14->0 || C)
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
RLC (R)+
---------------
R.out, TMP1.in.r, ALU.r+1
ALU.out, R.in
TMP1.([dst] 14->0 || C)
TMP1.out.l, R.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
RLC -(R)
---------------
R.out, ALU.r-1
ALU.out, R.in
R.([dst] 14->0 || C)
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
RLC X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || C)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
RLC @R
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || C)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 3

---------------
RLC @(R)+
---------------
R.out, ALU.=r, ALU.out, MAR.in, RD
MAR.out, ALU.r+1, ALU.out, R.in
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || C)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
RLC @-(R)
---------------
R.out, ALU.r-1, ALU.out, TMP1.in.l
TMP1.out.l, R.in, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || C)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 10
Instruction Total MEM access (RD,WR) = 3

---------------
RLC @X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, MAR.in, RD
MDR.out, TMP1.in.r
TMP1.([dst] 14->0 || C)
TMP1.out.l, MDR.in, WR
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
BR <OFFSET>
---------------
ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 8
Instruction Total MEM access (RD,WR) = 1

---------------
BEQ <OFFSET>
---------------
IF NOT (Z=1) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
BNE <OFFSET>
---------------
IF NOT (Z=0) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
BLO <OFFSET>
---------------
IF NOT (C=0) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
BLS <OFFSET>
---------------
IF NOT (C=0 or Z=1) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
BHI <OFFSET>
---------------
IF NOT (C=1) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
BHS <OFFSET>
---------------
IF NOT (C=1 or Z=1) THEN END, ADDR_PART_IR.out, TMP1.in.r
TMP1.out.l, PC.out, ALU.r+l
ALU.out, PC.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 1

---------------
HLT
---------------
HLT
END

Instruction Total CPU cicles = 6
Instruction Total MEM access (RD,WR) = 1

---------------
NOP
---------------
END

Instruction Total CPU cicles = 5
Instruction Total MEM access (RD,WR) = 1

---------------
JSR X(R)
---------------
PC.out, ALU.=r, ALU.out, MAR.in, RD
PC.out, ALU.r+1
ALU.out, PC.in
MDR.out, TMP1.in.r
R.out, TMP1.out.l, ALU.r+l
ALU.out, TMP1.in.l
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
PC.out, ALU.=r, ALU.out, MDR.in, WR
TM1.out.l, PC.in
END

Instruction Total CPU cicles = 15
Instruction Total MEM access (RD,WR) = 3

---------------
RTS
---------------
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, PC.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
END

Instruction Total CPU cicles = 9
Instruction Total MEM access (RD,WR) = 2

---------------
INT
---------------
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
FLAGS.out, ALU.=r, ALU.out, MDR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
R6.out, ALU.r-1
ALU.out, R6.in, MAR.in
PC.out, ALU.=r, ALU.out, MDR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
PC.in, HARDWARE_ADDRESS
END

Instruction Total CPU cicles = 14
Instruction Total MEM access (RD,WR) = 4

---------------
IRET
---------------
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, PC.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
R6.out, ALU.=r, ALU.out, MAR.in, RD
MDR.out, ALU.=r, ALU.out, FLAGS.in
R6.out, ALU.r+1
ALU.out, R6.in, MAR.in
END

Instruction Total CPU cicles = 13
Instruction Total MEM access (RD,WR) = 3
--------------------
--------------------
Total CPU cicles = 8537
Total MEM access = 2085

Average MEM access = 3.080
CPI = 12.610
